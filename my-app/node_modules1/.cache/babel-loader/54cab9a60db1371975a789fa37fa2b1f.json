{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Katusha\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Katusha\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Katusha\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Katusha\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from\"react-redux\";import Teams from'./Teams';import TeamSchedule from'./TeamSchedule/TeamSchedule';import{withRouter}from'react-router-dom';import{setTeamCreator}from\"../../redux/teams-reducer\";import{setListTeamsCreator}from\"../../redux/teams-reducer\";import{setLeagueCreator}from\"../../redux/leagues-reducer\";import{compose}from\"redux\";import Preloader from'../common/Preloader/Preloader';var TeamsContainer=/*#__PURE__*/function(_React$Component){_inherits(TeamsContainer,_React$Component);var _super=_createSuper(TeamsContainer);function TeamsContainer(){var _this;_classCallCheck(this,TeamsContainer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.selTeam=function(text){_this.props.setTeamCreator(text);};return _this;}_createClass(TeamsContainer,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var league_id=this.props.match.params.league_id;var API_KEY=process.env.REACT_APP_USER_TOKEN;var year=this.props.year;var apiUrl=\"https://api.football-data.org/v2/competitions/\"+league_id+\"/teams?season=\"+year;fetch(apiUrl,{method:'GET',headers:{'X-Auth-Token':API_KEY}}).then(function(response){return response.json();}).then(function(response){console.log({matches:response.teams});_this2.props.setListTeamsCreator(response.teams);if(_this2.props.league_id!==_this2.props.match.params.league_id){var league={id:response.competition.code,name:response.competition.name};_this2.props.setLeagueCreator(league);}//this.setState({isLoaded: true});\n}).then(function(error){_this2.setState({false:true});_this2.setState({error:error});}).catch(function(error){return console.log('parsing failed',error);});//setlistLeaguesCreator(this.props.Data.matches);\n/* action = setLeagueSchedule(this.props.Data.matches);\r\n    this.props.dispatch(action);\r\n */ // setListTeamsCreator(this.props.Data);\n//const setLeagueCreator = (text) => ({ type: SET_LEAGUE, league:text });\n//const storeLeagueSchedule = () => {this.props.store.getState().leagues.leagueSchedule};\n//action = setLeagueSchedule(Data.matches);\n//this.props.store.dispatch(setLeagueSchedule(leagueScheduleData.matches));  \n}},{key:\"render\",value:function render(){/*if (error) {\r\n      \t\treturn <div>Error: {error.message}</div>;\r\n  \t\t} \r\n  \t\telse if (!loaded) {\r\n      \t\treturn <div>Loading...</div>;\r\n  \t\t} \r\n  \t\telse {*/return/*#__PURE__*/React.createElement(React.Fragment,null,this.props.isFetching?/*#__PURE__*/React.createElement(Preloader,null):null,/*#__PURE__*/React.createElement(Teams,{teams:this.props.listTeams,league_name:this.props.league_name,year:this.props.year,search:this.props.search,selTeam:this.selTeam}));//}\n}}]);return TeamsContainer;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{league_name:state.leagues.league.name,listTeams:state.teams.listTeams,year:state.year,search:state.search,isFetching:state.teams.isFetching};};export default compose(connect(mapStateToProps,{setTeamCreator:setTeamCreator}),connect(mapStateToProps,{setListTeamsCreator:setListTeamsCreator}),connect(mapStateToProps,{setLeagueCreator:setLeagueCreator}),withRouter)(TeamsContainer);","map":{"version":3,"sources":["C:/Users/Katusha/my-app/src/components/Teams/TeamsContainer.js"],"names":["React","Component","connect","Teams","TeamSchedule","withRouter","setTeamCreator","setListTeamsCreator","setLeagueCreator","compose","Preloader","TeamsContainer","selTeam","text","props","league_id","match","params","API_KEY","process","env","REACT_APP_USER_TOKEN","year","apiUrl","fetch","method","headers","then","response","json","console","log","matches","teams","league","id","competition","code","name","error","setState","false","catch","isFetching","listTeams","league_name","search","mapStateToProps","state","leagues"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport Teams from './Teams';\r\nimport TeamSchedule from './TeamSchedule/TeamSchedule';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {setTeamCreator} from \"../../redux/teams-reducer\";\r\nimport {setListTeamsCreator} from \"../../redux/teams-reducer\";\r\nimport {setLeagueCreator} from \"../../redux/leagues-reducer\";\r\nimport {compose} from \"redux\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nclass TeamsContainer extends React.Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\r\n    let league_id = this.props.match.params.league_id;\r\n\t\tlet API_KEY = process.env.REACT_APP_USER_TOKEN;\r\n    \t\r\n    \tlet year = this.props.year;\r\n\r\n     \r\n    \tconst apiUrl = \"https://api.football-data.org/v2/competitions/\"+league_id+\"/teams?season=\"+year;\r\n\r\n    \tfetch(apiUrl, {\r\n      \t\tmethod: 'GET',\r\n      \t\theaders: {\r\n         \t  'X-Auth-Token': API_KEY\r\n      \t\t}\r\n    \t})\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        console.log({matches:response.teams});\r\n        this.props.setListTeamsCreator(response.teams);\r\n        if (this.props.league_id !== this.props.match.params.league_id)\r\n           {let league={id:response.competition.code, name: response.competition.name};\r\n            this.props.setLeagueCreator(league);}\r\n          //this.setState({isLoaded: true});\r\n      })\r\n      .then((error) => {\r\n          this.setState({false: true});\r\n          this.setState({error});\r\n      })    \t\r\n    \t.catch(error => console.log('parsing failed', error))\r\n\r\n   //setlistLeaguesCreator(this.props.Data.matches);\r\n   /* action = setLeagueSchedule(this.props.Data.matches);\r\n    this.props.dispatch(action);\r\n */\r\n // setListTeamsCreator(this.props.Data);\r\n //const setLeagueCreator = (text) => ({ type: SET_LEAGUE, league:text });\r\n //const storeLeagueSchedule = () => {this.props.store.getState().leagues.leagueSchedule};\r\n\r\n    //action = setLeagueSchedule(Data.matches);\r\n    //this.props.store.dispatch(setLeagueSchedule(leagueScheduleData.matches));  \r\n\r\n  \t}\t\r\n\r\n  selTeam = (text) => {\r\n      this.props.setTeamCreator(text);\r\n      }\r\n\r\n\trender() {  \r\n\t\t/*if (error) {\r\n      \t\treturn <div>Error: {error.message}</div>;\r\n  \t\t} \r\n  \t\telse if (!loaded) {\r\n      \t\treturn <div>Loading...</div>;\r\n  \t\t} \r\n  \t\telse {*/\r\n\t\t  return <>\r\n           { this.props.isFetching ? <Preloader />: null} \r\n\t\t\t     <Teams teams = {this.props.listTeams} league_name={this.props.league_name} year={this.props.year} search={this.props.search} selTeam={this.selTeam}/>\r\n\t\t\t</>\r\n\t\t//}\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    league_name : state.leagues.league.name,  \r\n    listTeams : state.teams.listTeams,\r\n    year:state.year,\r\n    search:state.search,\r\n    isFetching: state.teams.isFetching\r\n})\r\n\r\nexport default compose(connect(mapStateToProps,{setTeamCreator}),\r\n                       connect(mapStateToProps,{setListTeamsCreator}),\r\n                       connect(mapStateToProps,{setLeagueCreator}),\r\n                       withRouter\r\n)(TeamsContainer);\r\n\r\n"]},"metadata":{},"sourceType":"module"}